MODEL:
  META_ARCHITECTURE: "DLDetector"
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/efficientnet-b0-355c32eb.pth"
#   WEIGHTS: "/root/code/det2_efficientnet/detectron2/output/ednet_seg_det_11/model_0299999.pth"
  BACKBONE:
    NAME: "build_retinanet_ednet_fpn_backbone"
  RESNETS:
    OUT_FEATURES: ["res3", "res4", "res5"]
  ANCHOR_GENERATOR:
    SIZES: !!python/object/apply:eval ["[[x, x * 2**(1.0/3), x * 2**(2.0/3) ] for x in [32, 64, 128, 256, 512 ]]"]
  FPN:
    IN_FEATURES: ["res3", "res4", "res5"]
  RETINANET:
    IOU_THRESHOLDS: [0.4, 0.5]
    IOU_LABELS: [0, -1, 1]
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 1.5
  DL_DET_HEAD:
    CONVS_DIM: 256
    NUM_CLASSES: 80
    IN_FEATURES: ['p3', 'p4']  # ommit, 'p5' 'p6', 'p7' whose strides are too big
  MASK_ON: true
  KEYPOINT_ON: true
DATASETS:
  TRAIN: ("keypoints_coco_2017_train",)
  TEST: ("keypoints_coco_2017_val",)
SOLVER:
  LR_SCHEDULER_NAME: "WarmupCosineLR"
  WEIGHT_DECAY: 0.00004
  IMS_PER_BATCH: 4 
  BASE_LR: 0.03  # 0.08 Note that RetinaNet uses a different default learning rate
  MAX_ITER: 600000
  WARMUP_ITERS: 20000
  WARMUP_FACTOR: 0.0001
INPUT:
  MAX_SIZE_TRAIN: 1024
  MAX_SIZE_TEST: 1024
  MASK_FORMAT: "bitmask"  # alternative: "polygon"
OUTPUT_DIR: "./output/ednet_dl_det_kp_0"
